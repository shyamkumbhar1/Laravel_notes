To create a migration for storing configuration settings in the database, you can follow these steps:

Generate a migration file using Artisan CLI:
bash
Copy code
php artisan make:migration create_configuration_table
Open the generated migration file (database/migrations/xxxx_xx_xx_create_configuration_table.php) and define the schema for the configurations table. Here's an example of how it might look:
php
Copy code
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateConfigurationTable extends Migration
{
    public function up()
    {
        Schema::create('configurations', function (Blueprint $table) {
            $table->id();
            $table->string('key')->unique();
            $table->text('value');
            $table->string('environment'); // Add environment column

            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('configurations');
    }
}
Run the migration to create the configurations table:
bash
Copy code
php artisan migrate
Now you have a configurations table in your database where you can store configuration settings. Each row in the table will represent a key-value pair, with the key column being unique.

You can then use Eloquent to interact with this table to store and retrieve configuration settings in your application. For example, to store a configuration setting:

php
Copy code
use App\Models\Configuration;

Configuration::create([
    'key' => 'stripe_webhook_secret',
    'value' => 'your_webhook_secret_value_here',
]);
And to retrieve a configuration setting:

php
Copy code
use App\Models\Configuration;

$webhookSecret = Configuration::where('key', 'stripe_webhook_secret')->value('value'
