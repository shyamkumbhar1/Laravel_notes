<?php

namespace App\Http\Controllers;

use Illuminate\Support\Str;

class StringManipulationController extends Controller
{
    private $str;

    public function __construct()
    {
        $this->str = "Shyam Shyam";  
    }

    public function reverseString() {
        return Str::reverse($this->str); // Output is: 'mayhs'
    }

    public function findWordInString($searchTerm) {
        return Str::contains($this->str, $searchTerm); // Output is: true/false
    }

    public function countWordsInString() {
        return Str::wordCount($this->str); // Output is: 1
    }

    public function removeSpecialCharacters() {
        return Str::of($this->str)->removeRegex('/[^A-Za-z0-9\-]/')->__toString(); // Output is: 'Shyam'
    }

    public function replaceWordInString($searchTerm, $replacement) {
    return Str::replace($searchTerm, $replacement, $this->str); // Output is: 'Shyam'
    }

    public function isPalindrome() {
        $str = Str::lower(preg_replace('/[^A-Za-z0-9]/', '', $this->str));
        return $str === Str::reverse($str); // Output is: true/false
    }

    public function extractNumbersFromString() {
        return Str::of($this->str)->match('/\d+/'); // Output is: 'Shyam'
    }

    public function convertToTitleCase() {
        return Str::of($this->str)->title(); // Output is: 'Shyam'
    }

    public function removeDuplicateWords() {
        return Str::of($this->str)->unique()->__toString(); // Output is: 'Shyam'
    }

    public function findLongestWord() {
        return collect(explode(' ', $this->str))->max(function ($word) {
            return Str::length($word);
        }); // Output is: 'Shyam'
    }
}
