Certainly! Let's organize the steps to integrate Stripe payment gateway with Laravel for subscriptions in a comprehensive manner:

Set Up a Stripe Account:

Sign up for a Stripe account at Stripe Dashboard.
Install the Stripe PHP Library:

Use Composer to install the Stripe PHP library in your Laravel project:

composer require stripe/stripe-php
Configure Stripe API Keys:

Add your Stripe API keys to your Laravel .env file:

STRIPE_KEY=your_stripe_publishable_key
STRIPE_SECRET=your_stripe_secret_key
Set Up Routes:

Define routes for handling subscription-related actions such as subscribing, updating, and canceling in your routes/web.php file.
Create Subscription Controller:


php artisan make:controller SubscriptionController


<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Stripe\Stripe;
use Stripe\Customer;
use Stripe\Subscription;
use App\Models\User; // Assuming you have a User model

class SubscriptionController extends Controller
{
    public function subscribe(Request $request)
    {
        try {
            // Set your Stripe secret key
            Stripe::setApiKey(env('STRIPE_SECRET'));

            // Find or create a customer in Stripe
            $customer = Customer::create([
                'email' => $request->email,
                'source' => $request->stripeToken // Stripe token generated by Stripe.js
            ]);

            // Subscribe the customer to a plan
            $subscription = Subscription::create([
                'customer' => $customer->id,
                'items' => [['plan' => $request->plan_id]] // Replace with the plan ID from request
            ]);

            // Save subscription details in your database
            $user = User::where('email', $request->email)->first();
            $user->stripe_id = $customer->id;
            $user->subscription_id = $subscription->id;
            $user->save();

            // Subscription successful, do something (e.g., redirect user, send confirmation email)
            return redirect()->back()->with('success', 'Subscription successful!');
        } catch (\Exception $e) {
            // Subscription failed, handle error (e.g., display error message)
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function updateSubscription(Request $request)
    {
        try {
            // Set your Stripe secret key
            Stripe::setApiKey(env('STRIPE_SECRET'));

            // Retrieve the user's subscription
            $user = User::find($request->user_id);

            // Update the subscription
            $subscription = Subscription::update(
                $user->subscription_id,
                ['items' => [['id' => $user->subscription_id, 'plan' => $request->plan_id]]]
            );

            // Update subscription details in your database
            $user->save();

            // Subscription updated successfully, do something
            return redirect()->back()->with('success', 'Subscription updated successfully!');
        } catch (\Exception $e) {
            // Subscription update failed, handle error
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function cancelSubscription(Request $request)
    {
        try {
            // Set your Stripe secret key
            Stripe::setApiKey(env('STRIPE_SECRET'));

            // Retrieve the user's subscription
            $user = User::find($request->user_id);

            // Cancel the subscription
            $subscription = Subscription::retrieve($user->subscription_id)->cancel();

            // Update subscription details in your database
            $user->subscription_id = null;
            $user->save();

            // Subscription canceled successfully, do something
            return redirect()->back()->with('success', 'Subscription canceled successfully!');
        } catch (\Exception $e) {
            // Subscription cancellation failed, handle error
            return redirect()->back()->with('error', $e->getMessage());
        }
    }
}


// Setup WebHook For Subscription Renual 
// In your webhook controller
use Illuminate\Support\Facades\Mail;
use App\Mail\SubscriptionRenewalReminder;

public function handleSubscriptionRenewal(Request $request)
{
    $payload = $request->all();

    // Verify the webhook signature
    // You can use the `stripe-php` library for this:
    // https://stripe.com/docs/webhooks/signatures
    // Ensure the event is a valid subscription renewal event

    if ($payload['type'] === 'invoice.payment_succeeded') {
        // Subscription renewal successful, retrieve subscription ID
        $subscriptionId = $payload['data']['object']['subscription'];

        // Perform any necessary actions, such as updating user records
        $subscription = Subscription::retrieve($subscriptionId);
        $customerId = $subscription->customer;

        // Retrieve user based on Stripe customer ID
        $user = User::where('stripe_id', $customerId)->first();

        // Update user's subscription status or perform other actions
        // For example:
        $user->subscription_status = 'active';
        $user->save();

        // Calculate the renewal date
        $nextRenewalDate = $subscription->current_period_end;
        $twoDaysBeforeRenewal = date('Y-m-d', strtotime('-2 days', $nextRenewalDate));

        // Check if the renewal date is within two days
        if (strtotime($twoDaysBeforeRenewal) <= strtotime('now')) {
            // Send notification to user about upcoming renewal
            Mail::to($user->email)->send(new SubscriptionRenewalReminder);
        }
    }

    // Return a response to Stripe indicating successful webhook processing
    return response()->json(['status' => 'success']);
}
