
composer require stripe/stripe-php
// .env file:
STRIPE_KEY=your_stripe_publishable_key
STRIPE_SECRET=your_stripe_secret_key

// web.php File :
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\SubscriptionController;

Route::post('/subscribe', [SubscriptionController::class, 'subscribe'])->name('subscribe');
Route::post('/update-subscription', [SubscriptionController::class, 'updateSubscription'])->name('update.subscription');
Route::post('/cancel-subscription', [SubscriptionController::class, 'cancelSubscription'])->name('cancel.subscription');
Route::post('/handle-subscription-renewal', [SubscriptionController::class, 'handleSubscriptionRenewal'])->name('handle.subscription.renewal');




php artisan make:controller SubscriptionController


<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Stripe\Stripe;
use Stripe\Customer;
use Stripe\Subscription;
use Stripe\Webhook;
use App\Models\User; // Assuming you have a User model
use Illuminate\Support\Facades\Mail;
use App\Mail\SubscriptionRenewalReminder;

class SubscriptionController extends Controller
{
    public function subscribe(Request $request)
    {
        try {
            // Set your Stripe secret key
            Stripe::setApiKey(env('STRIPE_SECRET'));

            // Find or create a customer in Stripe
            $customer = Customer::create([
                'email' => $request->email,
                'source' => $request->stripeToken // Stripe token generated by Stripe.js
            ]);

            // Subscribe the customer to a plan
            $subscription = Subscription::create([
                'customer' => $customer->id,
                'items' => [['plan' => $request->plan_id]] // Replace with the plan ID from request
            ]);

            // Save subscription details in your database
            $user = User::where('email', $request->email)->first();
            $user->stripe_id = $customer->id;
            $user->subscription_id = $subscription->id;
            $user->save();

            // Subscription successful, do something (e.g., redirect user, send confirmation email)
            return redirect()->back()->with('success', 'Subscription successful!');
        } catch (\Exception $e) {
            // Subscription failed, handle error (e.g., display error message)
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function updateSubscription(Request $request)
    {
        try {
            // Set your Stripe secret key
            Stripe::setApiKey(env('STRIPE_SECRET'));

            // Retrieve the user's subscription
            $user = User::find($request->user_id);

            // Update the subscription
            $subscription = Subscription::update(
                $user->subscription_id,
                ['items' => [['id' => $user->subscription_id, 'plan' => $request->plan_id]]]
            );

            // Update subscription details in your database
            $user->save();

            // Subscription updated successfully, do something
            return redirect()->back()->with('success', 'Subscription updated successfully!');
        } catch (\Exception $e) {
            // Subscription update failed, handle error
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function cancelSubscription(Request $request)
    {
        try {
            // Set your Stripe secret key
            Stripe::setApiKey(env('STRIPE_SECRET'));

            // Retrieve the user's subscription
            $user = User::find($request->user_id);

            // Cancel the subscription
            $subscription = Subscription::retrieve($user->subscription_id)->cancel();

            // Update subscription details in your database
            $user->subscription_id = null;
            $user->save();

            // Subscription canceled successfully, do something
            return redirect()->back()->with('success', 'Subscription canceled successfully!');
        } catch (\Exception $e) {
            // Subscription cancellation failed, handle error
            return redirect()->back()->with('error', $e->getMessage());
        }
    }

    public function handleSubscriptionRenewal(Request $request)
    {
        // Retrieve the request payload
        $payload = $request->getContent();

        // Retrieve the signature from the request headers
        $signature = $request->header('Stripe-Signature');

        // Verify the signature using your Stripe webhook secret
        $webhookSecret = config('services.stripe.webhook_secret'); // Retrieve your webhook secret from configuration

        try {
            // Verify the signature
            $event = Webhook::constructEvent($payload, $signature, $webhookSecret);
        } catch (\Exception $e) {
            // Signature verification failed
            return response()->json(['error' => 'Invalid signature'], 400);
        }

        if ($payload['type'] === 'invoice.payment_succeeded') {
            // Subscription renewal successful, retrieve subscription ID
            $subscriptionId = $payload['data']['object']['subscription'];

            // Perform any necessary actions, such as updating user records
            $subscription = Subscription::retrieve($subscriptionId);
            $customerId = $subscription->customer;

            // Retrieve user based on Stripe customer ID
            $user = User::where('stripe_id', $customerId)->first();

            // Update user's subscription status or perform other actions
            // For example:
            $user->subscription_status = 'active';
            $user->save();

            // Calculate the renewal date
            $nextRenewalDate = $subscription->current_period_end;
            $twoDaysBeforeRenewal = date('Y-m-d', strtotime('-2 days', $nextRenewalDate));

            // Check if the renewal date is within two days
            if (strtotime($twoDaysBeforeRenewal) <= strtotime('now')) {
                // Send notification to user about upcoming renewal
                Mail::to($user->email)->send(new SubscriptionRenewalReminder);
            }
        }

        // Return a response to Stripe indicating successful webhook processing
        return response()->json(['status' => 'success']);
    }
}
